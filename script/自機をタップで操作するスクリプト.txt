using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class touch_control_kitai : MonoBehaviour
{
    public bool flag_player_control = true; // プレイヤー操作可否のフラグ(trueなら操作が可能)

    private Vector3 playerPos;
    private Vector3 mousePos;

    Vector3 tmp_pos;

    void Update()
    {
        // プレイヤー操作可否のフラグが true なら、プレイヤーを操作可能
        if (flag_player_control == true)
        {
            playerControl();
        }
    }

    private void playerControl()
    {
        if (Input.GetMouseButtonDown(0))
        {
            playerPos = this.transform.position;
            mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        }

        if (Input.GetMouseButton(0))
        {
            Vector3 diff = Camera.main.ScreenToWorldPoint(Input.mousePosition) - mousePos;

            // タッチ対応デバイス向け、1本目の指にのみ反応
            if (Input.touchSupported)
            {
                diff = Camera.main.ScreenToWorldPoint(Input.GetTouch(0).position) - mousePos;
            }

            diff.z = 0.0f;
            this.transform.position = playerPos + diff;
        }

        if (Input.GetMouseButtonUp(0))
        {
            playerPos = Vector3.zero;
            mousePos = Vector3.zero;
        }

        // カメラの視野範囲を取得
        Camera cam = Camera.main;
        float height = 2f * cam.orthographicSize; // カメラの高さ
        float width = height * cam.aspect; // カメラの幅

        tmp_pos = transform.position;

        // オブジェクトが画面外に出ないように制限
        tmp_pos.x = Mathf.Clamp(tmp_pos.x, cam.transform.position.x - width / 2, cam.transform.position.x + width / 2);
        tmp_pos.y = Mathf.Clamp(tmp_pos.y, cam.transform.position.y - height / 2, cam.transform.position.y + height / 2);

        transform.position = tmp_pos;
    }
}
